from torchvision import models
import torch.nn.functional as F
from .resnet_model import *

class Decoder(nn.Module):
    def __init__(self):
        super(Decoder, self).__init__()

        # resnet = models.resnet34(pretrained=True)

        ## -------------Decoder--------------
        #stage 5d
        self.conv5d_1 = nn.Conv2d(1024, 512, 3, padding=1)  # 512 + 512
        self.bn5d_1 = nn.BatchNorm2d(512)
        self.relu5d_1 = nn.ReLU(inplace=True)

        self.conv5d_m = nn.Conv2d(512, 256, 3, dilation=2, padding=2)
        self.bn5d_m = nn.BatchNorm2d(256)
        self.relu5d_m = nn.ReLU(inplace=True)

        self.conv5d_2 = nn.Conv2d(256, 256, 3,dilation=2, padding=2)
        self.bn5d_2 = nn.BatchNorm2d(256)
        self.relu5d_2 = nn.ReLU(inplace=True)

        #stage 4d
        self.conv4d_1 = nn.Conv2d(512, 256, 3, padding=1)  #  128+64
        self.bn4d_1 = nn.BatchNorm2d(256)
        self.relu4d_1 = nn.ReLU(inplace=True)

        self.conv4d_m = nn.Conv2d(256, 128, 3, padding=1)
        self.bn4d_m = nn.BatchNorm2d(128)
        self.relu4d_m = nn.ReLU(inplace=True)

        self.conv4d_2 = nn.Conv2d(128,128,3,padding=1)
        self.bn4d_2 = nn.BatchNorm2d(128)
        self.relu4d_2 = nn.ReLU(inplace=True)

        #stage 3d
        self.conv3d_1 = nn.Conv2d(256,128,3,padding=1)   #  128+64
        self.bn3d_1 = nn.BatchNorm2d(128)
        self.relu3d_1 = nn.ReLU(inplace=True)

        self.conv3d_m = nn.Conv2d(128,64,3,padding=1)
        self.bn3d_m = nn.BatchNorm2d(64)
        self.relu3d_m = nn.ReLU(inplace=True)

        self.conv3d_2 = nn.Conv2d(64,64,3,padding=1)
        self.bn3d_2 = nn.BatchNorm2d(64)
        self.relu3d_2 = nn.ReLU(inplace=True)

        #stage 2d
        self.conv2d_1 = nn.Conv2d(128,96,3,padding=1)
        self.bn2d_1 = nn.BatchNorm2d(96)
        self.relu2d_1 = nn.ReLU(inplace=True)

        self.conv2d_m = nn.Conv2d(96,64,3,padding=1)
        self.bn2d_m = nn.BatchNorm2d(64)
        self.relu2d_m = nn.ReLU(inplace=True)

        self.conv2d_2 = nn.Conv2d(64,64,3,padding=1)
        self.bn2d_2 = nn.BatchNorm2d(64)
        self.relu2d_2 = nn.ReLU(inplace=True)

        # n_stage
        self.convnd_1 = nn.Conv2d(64, 32, 3, padding=1)  # 64+3
        self.bnnd_1 = nn.BatchNorm2d(32)
        self.relund_1 = nn.ReLU(inplace=True)

        self.convnd_m = nn.Conv2d(32, 32, 3, padding=1)
        self.bnnd_m = nn.BatchNorm2d(32)
        self.relund_m = nn.ReLU(inplace=True)

        self.convnd_2 = nn.Conv2d(32, 32, 3, padding=1)
        self.bnnd_2 = nn.BatchNorm2d(32)
        self.relund_2 = nn.ReLU(inplace=True)

        # stage 1d
        self.conv1d_1 = nn.Conv2d(35, 32, 3, padding=1)  # 64+3
        self.bn1d_1 = nn.BatchNorm2d(32)
        self.relu1d_1 = nn.ReLU(inplace=True)

        self.conv1d_m = nn.Conv2d(32, 16, 3, padding=1)
        self.bn1d_m = nn.BatchNorm2d(16)
        self.relu1d_m = nn.ReLU(inplace=True)

        self.conv1d_2 = nn.Conv2d(16, 3, 3, padding=1)
        self.bn1d_2 = nn.BatchNorm2d(3)
        self.relu1d_2 = nn.ReLU(inplace=True)

        ## -------------Bilinear Upsampling--------------
        self.upscore32 = nn.Upsample(scale_factor=32, mode='bilinear')
        self.upscore16 = nn.Upsample(scale_factor=16, mode='bilinear')
        self.upscore8  = nn.Upsample(scale_factor=8,  mode='bilinear')
        self.upscore4  = nn.Upsample(scale_factor=4,  mode='bilinear')
        self.upscore2  = nn.Upsample(scale_factor=2,  mode='bilinear')

        ## -------------Side Output--------------
        self.outconvb = nn.Conv2d(1024, 1, 3, padding=1)
        self.outconvn = nn.Conv2d(256, 1, 3, padding=1)
        self.outconv5 = nn.Conv2d(128, 1, 3, padding=1)
        self.outconv4 = nn.Conv2d(64, 1, 3, padding=1)
        self.outconv3 = nn.Conv2d(64,  1, 3, padding=1)
        self.outconv2 = nn.Conv2d(32,   1, 3, padding=1)
        self.outconv1 = nn.Conv2d(3, 1, 3, padding=1)

    def forward(self, img, depth, feature_map4, feature_map3, feature_map2, feature_map1):  # adopt three depth_layers generated by of T2T module

        hx = self.relu5d_1(self.bn5d_1(self.conv5d_1(torch.cat((img, depth), 1))))  # 512+512
        hx = self.relu5d_m(self.bn5d_m(self.conv5d_m(hx)))
        hd5 = self.relu5d_2(self.bn5d_2(self.conv5d_2(hx)))

        hx = self.upscore2(hd5)  # 7 -> 14

        hx = self.relu4d_1(self.bn4d_1(self.conv4d_1(torch.cat((hx, feature_map4),1))))
        hx = self.relu4d_m(self.bn4d_m(self.conv4d_m(hx)))
        hd4 = self.relu4d_2(self.bn4d_2(self.conv4d_2(hx)))

        hx = self.upscore2(hd4) # 14 -> 28

        hx = self.relu3d_1(self.bn3d_1(self.conv3d_1((torch.cat((hx, feature_map3),1)))))
        hx = self.relu3d_m(self.bn3d_m(self.conv3d_m(hx)))
        hd3 = self.relu3d_2(self.bn3d_2(self.conv3d_2(hx)))

        hx = self.upscore2(hd3)  # 28 -> 56

        hx = self.relu2d_1(self.bn2d_1(self.conv2d_1((torch.cat((hx, feature_map2),1)))))
        hx = self.relu2d_m(self.bn2d_m(self.conv2d_m(hx)))
        hd2 = self.relu2d_2(self.bn2d_2(self.conv2d_2(hx)))

        hx = self.upscore2(hd2)  # 56 -> 112

        hx_n = self.relund_1(self.bnnd_1(self.convnd_1(hx)))
        hx_n = self.relund_m(self.bnnd_m(self.convnd_m(hx_n)))
        hd_n = self.relund_2(self.bnnd_2(self.convnd_2(hx_n)))

        hx = self.upscore2(hd_n)  # 112 -> 224

        hx = self.relu1d_1(self.bn1d_1(self.conv1d_1(torch.cat((hx, feature_map1), 1))))
        hx = self.relu1d_m(self.bn1d_m(self.conv1d_m(hx)))
        hd1 = self.relu1d_2(self.bn1d_2(self.conv1d_2(hx)))

        ## -------------Side Output-------------
        db_7 = self.outconvb(torch.cat((img, depth),1))
        udb_7 = self.upscore32(db_7)  # 7->224

        db_7_c = self.outconvn(hd5)
        ud_7_c = self.upscore32(db_7_c)  # 7->224

        d_14 = self.outconv5(hd4)
        ud_14 = self.upscore16(d_14)  # 14->224

        d_28 = self.outconv4(hd3)
        ud_28 = self.upscore8(d_28)   # 28->224

        d_56 = self.outconv3(hd2)
        ud_56 = self.upscore4(d_56)   # 56->224

        d_112 = self.outconv2(hd_n)
        ud_112 = self.upscore2(d_112)   # 112->224

        d_224 = self.outconv1(hd1)   # 224->224

        return torch.sigmoid(d_224), torch.sigmoid(d_112), torch.sigmoid(d_56), torch.sigmoid(d_28), torch.sigmoid(d_14), torch.sigmoid(db_7_c), torch.sigmoid(db_7), \
               torch.sigmoid(ud_112), torch.sigmoid(ud_56), torch.sigmoid(ud_28), torch.sigmoid(ud_14), torch.sigmoid(ud_7_c), torch.sigmoid(udb_7)

# from torchvision import models
# import torch.nn.functional as F
# from .resnet_model import *
#
# class Decoder(nn.Module):
#     def __init__(self):
#         super(Decoder, self).__init__()
#
#         resnet = models.resnet34(pretrained=True)
#
#         ## -------------Decoder--------------
#         # 拼接模块
#         self.conv5pd_1 = nn.Conv2d(768,384,3,padding=1)  # 384 + 384
#         self.bn5pd_1 = nn.BatchNorm2d(384)
#         self.relu5pd_1 = nn.ReLU(inplace=True)
#
#         self.conv5pd_m = nn.Conv2d(384,192,3,dilation=2, padding=2)
#         self.bn5pd_m = nn.BatchNorm2d(192)
#         self.relu5pd_m = nn.ReLU(inplace=True)
#
#         self.conv5pd_2 = nn.Conv2d(192,192,3,dilation=2, padding=2)
#         self.bn5dp_2 = nn.BatchNorm2d(192)
#         self.relu5pd_2 = nn.ReLU(inplace=True)
#         # stage 6d
#         self.conv6d_1 = nn.Conv2d(1536, 768, 3, padding=1)  # 768 + 768
#         self.bn6d_1 = nn.BatchNorm2d(768)
#         self.relu6d_1 = nn.ReLU(inplace=True)
#
#         self.conv6d_m = nn.Conv2d(768, 384, 3, dilation=2, padding=2)
#         self.bn6d_m = nn.BatchNorm2d(384)
#         self.relu6d_m = nn.ReLU(inplace=True)
#
#         self.conv6d_2 = nn.Conv2d(384, 384, 3, dilation=2, padding=2)
#         self.bn6d_2 = nn.BatchNorm2d(384)
#         self.relu6d_2 = nn.ReLU(inplace=True)  # g
#         #stage 5d
#         self.conv5d_1 = nn.Conv2d(768,384,3,padding=1)  # 384 + 384
#         self.bn5d_1 = nn.BatchNorm2d(384)
#         self.relu5d_1 = nn.ReLU(inplace=True)
#
#         self.conv5d_m = nn.Conv2d(384,192,3,dilation=2, padding=2)
#         self.bn5d_m = nn.BatchNorm2d(192)
#         self.relu5d_m = nn.ReLU(inplace=True)
#
#         self.conv5d_2 = nn.Conv2d(192,192,3,dilation=2, padding=2)
#         self.bn5d_2 = nn.BatchNorm2d(192)
#         self.relu5d_2 = nn.ReLU(inplace=True)
#
#         #stage 4d
#         self.conv4d_1 = nn.Conv2d(384,192,3,padding=1)  # 128+64
#         self.bn4d_1 = nn.BatchNorm2d(192)
#         self.relu4d_1 = nn.ReLU(inplace=True)
#
#         self.conv4d_m = nn.Conv2d(192,96,3,padding=1)
#         self.bn4d_m = nn.BatchNorm2d(96)
#         self.relu4d_m = nn.ReLU(inplace=True)
#
#         self.conv4d_2 = nn.Conv2d(96,96,3,padding=1)
#         self.bn4d_2 = nn.BatchNorm2d(96)
#         self.relu4d_2 = nn.ReLU(inplace=True)
#
#         #stage 3d
#         self.conv3d_1 = nn.Conv2d(192,128,3,padding=1)   #  128+64
#         self.bn3d_1 = nn.BatchNorm2d(128)
#         self.relu3d_1 = nn.ReLU(inplace=True)
#
#         self.conv3d_m = nn.Conv2d(128,128,3,padding=1)
#         self.bn3d_m = nn.BatchNorm2d(128)
#         self.relu3d_m = nn.ReLU(inplace=True)
#
#         self.conv3d_2 = nn.Conv2d(128,128,3,padding=1)
#         self.bn3d_2 = nn.BatchNorm2d(128)
#         self.relu3d_2 = nn.ReLU(inplace=True)
#
#         #stage 2d
#         self.conv2d_1 = nn.Conv2d(320,160,3,padding=1)
#         self.bn2d_1 = nn.BatchNorm2d(160)
#         self.relu2d_1 = nn.ReLU(inplace=True)
#
#         self.conv2d_m = nn.Conv2d(160,80,3,padding=1)
#         self.bn2d_m = nn.BatchNorm2d(80)
#         self.relu2d_m = nn.ReLU(inplace=True)
#
#         self.conv2d_2 = nn.Conv2d(80,64,3,padding=1)
#         self.bn2d_2 = nn.BatchNorm2d(64)
#         self.relu2d_2 = nn.ReLU(inplace=True)
#
#         # stage 1d
#         self.conv1d_1 = nn.Conv2d(67, 64, 3, padding=1)  # 64+3
#         self.bn1d_1 = nn.BatchNorm2d(64)
#         self.relu1d_1 = nn.ReLU(inplace=True)
#
#         self.conv1d_m = nn.Conv2d(64, 16, 3, padding=1)
#         self.bn1d_m = nn.BatchNorm2d(16)
#         self.relu1d_m = nn.ReLU(inplace=True)
#
#         self.conv1d_2 = nn.Conv2d(16, 3, 3, padding=1)
#         self.bn1d_2 = nn.BatchNorm2d(3)
#         self.relu1d_2 = nn.ReLU(inplace=True)
#
#         ## -------------Bilinear Upsampling--------------
#         self.upscore32 = nn.Upsample(scale_factor=32, mode='bilinear')
#         self.upscore16 = nn.Upsample(scale_factor=16, mode='bilinear')
#         self.upscore8  = nn.Upsample(scale_factor=8,  mode='bilinear')
#         self.upscore4  = nn.Upsample(scale_factor=4,  mode='bilinear')
#         self.upscore2  = nn.Upsample(scale_factor=2,  mode='bilinear')
#
#         ## -------------Side Output--------------
#         self.outconvb = nn.Conv2d(1536, 1, 3, padding=1)
#         self.outconv6 = nn.Conv2d(384, 1, 3, padding=1)
#         self.outconv5 = nn.Conv2d(192, 1, 3, padding=1)
#         self.outconv4 = nn.Conv2d(96, 1, 3, padding=1)
#         self.outconv3 = nn.Conv2d(128,  1, 3, padding=1)
#         self.outconv2 = nn.Conv2d(64, 1, 3, padding=1)
#         self.outconv1 = nn.Conv2d(3, 1, 3, padding=1)
#
#     def forward(self, rgb_fea_1_16, depth_fea_1_16, rgb_fea_1_32, depth_fea_1_32, feature_map5, feature_map4, feature_map3, feature_map2, feature_map1):  # feature_map5(b,768,7,7) feature_map4(b,384,14,14) feature_map3(b,192,28,28) feature_map2(b,96,56,56) feature_map1(b,3,224,224)
#         # rgb_fea_1_16(b,196,384) depth_fea_1_16(b,196,384)
#         # rgb_fea_1_32(b, 49, 768) depth_fea_1_16(b, 49, 768)
#         hx = self.relu6d_1(self.bn6d_1(self.conv6d_1(torch.cat((rgb_fea_1_32, depth_fea_1_32), 1))))  # 768+768
#         hx = self.relu6d_m(self.bn6d_m(self.conv6d_m(hx)))
#         hd6 = self.relu6d_2(self.bn6d_2(self.conv6d_2(hx)))  # hd6(b,384,7,7)
#
#         hx = self.upscore2(hd6)  # 7 -> 14  # hx(1,384,14,14)
#
#         cx = self.relu5d_1(self.bn5d_1(self.conv5d_1(torch.cat((rgb_fea_1_16, rgb_fea_1_16), 1))))  # 384+384  k
#         cx = self.relu5d_m(self.bn5d_m(self.conv5d_m(cx)))
#         cd5 = self.relu5d_2(self.bn5d_2(self.conv5d_2(cx)))
#         cd = self.upscore8(cd5)  # cd:(b,192,56,56) g
#
#         hx = self.relu5d_1(self.bn5d_1(self.conv5d_1(torch.cat((hx, feature_map4), 1))))  # 384+384
#         hx = self.relu5d_m(self.bn5d_m(self.conv5d_m(hx)))
#         hd5 = self.relu5d_2(self.bn5d_2(self.conv5d_2(hx)))
#
#         hx = self.upscore2(hd5)  # 14 -> 28  # hx(b,192,28,28)
#         # print(hx.shape)
#
#         hx = self.relu4d_1(self.bn4d_1(self.conv4d_1(torch.cat((hx, feature_map3), 1))))
#         hx = self.relu4d_m(self.bn4d_m(self.conv4d_m(hx)))
#         hd4 = self.relu4d_2(self.bn4d_2(self.conv4d_2(hx)))  # hd4(b,96,28,28)
#
#         hx = self.upscore2(hd4)  # 28 -> 56  # hx(b,96,56,56)
#
#         hx = self.relu3d_1(self.bn3d_1(self.conv3d_1(torch.cat((hx, feature_map2), 1))))
#         hx = self.relu3d_m(self.bn3d_m(self.conv3d_m(hx)))
#         hd3 = self.relu3d_2(self.bn3d_2(self.conv3d_2(hx)))  # hd3(b,128,56,56)
#
#         hx = self.upscore2(hd3)  # 56 -> 112  hx(b,128,112,112)
#
#         hx = self.relu2d_1(self.bn2d_1(self.conv2d_1(torch.cat((hx, cd), 1))))
#         hx = self.relu2d_m(self.bn2d_m(self.conv2d_m(hx)))
#         hd2 = self.relu2d_2(self.bn2d_2(self.conv2d_2(hx)))  # hd2(b,64,112,112)
#
#         hx = self.upscore2(hd2)  # 112 -> 224  # hx(b64,224,224)
#         # print(hx.shape)
#         # print(1)
#
#         hx = self.relu1d_1(self.bn1d_1(self.conv1d_1(torch.cat((hx, feature_map1), 1))))
#         hx = self.relu1d_m(self.bn1d_m(self.conv1d_m(hx)))
#         hd1 = self.relu1d_2(self.bn1d_2(self.conv1d_2(hx)))  # hd1(b,3,224,224)
#
#         ## -------------Side Output-------------
#         db = self.outconvb(torch.cat((rgb_fea_1_32, depth_fea_1_32), 1))
#         udb = self.upscore32(db)  # 7->224
#
#         d6 = self.outconv6(hd6)
#         ud6 = self.upscore32(d6)  # 7->224
#
#         d5 = self.outconv5(hd5)
#         ud5 = self.upscore16(d5)  # 14->224
#
#         d4 = self.outconv4(hd4)
#         ud4 = self.upscore8(d4)   # 28->224
#
#         d3 = self.outconv3(hd3)
#         ud3 = self.upscore4(d3)   # 56->224
#
#         d2 = self.outconv2(hd2)
#         ud2 = self.upscore2(d2)   # 112->224
#
#         d1 = self.outconv1(hd1)   # 224->224
#
#         return F.sigmoid(d1), F.sigmoid(d2), F.sigmoid(d3), F.sigmoid(d4), F.sigmoid(d5), F.sigmoid(d6), F.sigmoid(db), F.sigmoid(ud2), F.sigmoid(ud3), F.sigmoid(ud4), F.sigmoid(ud5), F.sigmoid(ud6), F.sigmoid(udb)
